<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<groupId>ehh.test</groupId>
	<artifactId>spring-rest-dynamodb-example</artifactId>
	<version>unspecified</version>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.3.5.RELEASE</version>
	</parent>
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>


	<build>
		<plugins>
			<!-- Step 1: Downlaod the DynamoDB Local artifact. This will download 
				to a Maven cache on disk and is kept until the cache is cleared. The artifact 
				is unpacked to the target directory of the build. -->
			<plugin>
				<groupId>com.googlecode.maven-download-plugin</groupId>
				<artifactId>download-maven-plugin</artifactId>
				<version>1.3.0</version>
				<executions>
					<execution>
						<id>install-dynamodb_local</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>wget</goal>
						</goals>
						<configuration>
							<url>https://s3-sa-east-1.amazonaws.com/dynamodb-local-sao-paulo/dynamodb_local_latest.zip</url>
							<unpack>true</unpack>
							<outputDirectory>${project.build.directory}/dynamodb</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Step 2: Reserve a local port for Dynamo to start on. DynamoDB_Local 
				normally runs on port 8000. Rather than hoping that port is open, have this 
				plugin reserve an available port and set it as a property in the Maven build. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.9.1</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>reserve-network-port</goal>
						</goals>
						<configuration>
							<portNames>
								<portName>dynamodblocal.port</portName>
							</portNames>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Step 3: Start DynamoDB_Local just before integration tests are run. 
				This plugin will also cleanup the process during the post-integration-test 
				phase. -->
			<plugin>
				<groupId>com.bazaarvoice.maven.plugins</groupId>
				<artifactId>process-exec-maven-plugin</artifactId>
				<version>0.7</version>
				<executions>
					<execution>
						<id>dynamodb_local</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
						<configuration>
							<name>dynamodb_local</name>
							<!-- We need to let DynamoDB finish starting, but don't have a good 
								semamore. It's pretty quick to start, so 1 second should suffice. -->
							<waitAfterLaunch>1</waitAfterLaunch>
							<arguments>
								<argument>java</argument>
								<argument>-Djava.library.path=dynamodb/DynamoDBLocal_lib</argument>
								<argument>-jar</argument>
								<argument>dynamodb/DynamoDBLocal.jar</argument>
								<!-- Use the port that was reserved in step 2 -->
								<argument>-port</argument>
								<argument>${dynamodblocal.port}</argument>
								<!-- You run your tests in parallel, right? -->
								<argument>-sharedDb</argument>
								<!-- Remove this to keep data between restarts of the process. -->
								<argument>-inMemory</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Step 4: Use the failsafe plugin to run integration tests. https://maven.apache.org/surefire/maven-failsafe-plugin/ -->
			<plugin>
				<groupId>org.apache.maven.plugins </groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.19</version>
				<configuration>
					<sources>
						<source>src/integration-test/java</source>
					</sources>
					<systemPropertyVariables>
						<!-- Set a system property for the test clients to use when connecting. 
							Something like Apache's commons-configuration can pick this up transparently. -->
						<dynamo.endpoint>http://localhost:${dynamodblocal.port}</dynamo.endpoint>
					</systemPropertyVariables>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk-dynamodb</artifactId>
			<version>1.11.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.github.derjust</groupId>
			<artifactId>spring-data-dynamodb</artifactId>
			<version>4.3.1</version>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>1.3.5.RELEASE</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>
</project>
